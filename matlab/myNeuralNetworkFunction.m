function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Jun-2015 20:35:45.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-0.16278636;-0.92400002;142.52556;0.49274686];
  x1_step1_gain = [5.95826917642867;0.979431967852379;0.00671431908445156;2.81423010952111];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [7.6955862027998547;-8.0422398222764908;0.83086287095046019;8.647111739459989;4.5111153361230736;0.312377810097133;3.9830299465612127;0.35552680139731502;-1.2357061166571439;-2.8482905003227015;-2.0477797746521382;-0.13859128388627398;-2.3098931889627772;12.920179008959327;-13.060408236108143];
  IW1_1 = [4.9982011462657168 -15.524038646239575 -10.554568735409694 -2.9046351345307495;0.25641855126178814 10.411778327172096 1.4083161555191173 1.9984134590483553;2.5027826616010262 -10.605319240160515 -2.9329908847355255 -4.8650520071477166;0.46000646940750162 -7.080669233724886 -8.9447721169847583 4.7652111997844502;-0.92845019206652024 -0.004561695141878987 1.3574936410837186 -3.8078491831869123;-2.6700888138089853 9.3466968458679052 4.3532045502773604 5.0376244784367916;-0.89365838718297907 -0.27969548808201472 -1.1990344501761852 -5.7511976815853725;-0.35479082983523769 0.087553314284878364 -0.28452371266328758 0.34970762793548194;0.4040559960049413 0.18418399814534112 -1.7801243844269212 -0.65588389680218151;-0.090027938502766136 7.895876482674657 11.933786001418667 3.1903677350270039;-4.4922321429973575 4.121607302743973 -1.2997493615240814 -2.0756783388458242;0.10730661681111718 0.21499366635679773 1.1997512427993284 -0.60314195373698531;-4.5688184366764304 4.2623740466892173 -1.6558831385924189 -2.2548624837899736;-8.9327246348958873 18.324832267300579 -12.427582284261025 5.6372698812161985;-4.365071523139993 1.1858826902955715 1.2564778103576706 -10.913321062593679];
  
  % Layer 2
  b2 = 0.95662541870528672;
  LW2_1 = [1.230621038303934 0.062917881109765317 1.60377080243158 -7.2038194199231205 3.702400784448443 1.7251476541924073 -2.6444401121246197 13.503684406759715 3.5221446835564558 -5.2753191300944202 5.9330526503970606 6.876979801618341 -5.7243154398544434 1.4938232234687998 3.9342771509906802];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.63504365366338;
  y1_step1_xoffset = -1.44273837873303;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
